require('bibliometrix')
require('stringr')
require('tidyverse')
files <- readFiles('data/WoS/citations-1-500.txt','data/WoS/citations-501-1000.txt',
'data/WoS/citations-1001-1500.txt', 'data/WoS/citations-1501-2000.txt',
'data/WoS/citations-2001-2500.txt', 'data/WoS/citations-2501-3000.txt',
'data/WoS/citations-3001-3500.txt', 'data/WoS/citations-3501-4000.txt',
'data/WoS/citations-4001-4500.txt','data/WoS/citations-4501-4543.txt')
raw.articles <- bibliometrix::convert2df(files,dbsource = "isi", format = "plaintext")
parsed.articles <- metaTagExtraction(M = raw.articles, Field = "CR_AU")
citing.matrix <- cocMatrix(parsed.articles, Field = "CR_AU", type = "matrix", sep = ";") %>%
as_tibble()
citing.authors <- strsplit(parsed.articles$AU, ';')
# make a list with all citing authors
authors <- map_chr(citing.authors, function(paper.authors){return(paper.authors[1])})
citing.matrix <- citing.matrix %>%
mutate(first.author = authors) %>%
select(first.author, everything())
citing.matrix <- citing.matrix %>%
arrange(first.author) %>%
filter(first.author != "NA", first.author != "ANONYMOUS") %>%
select(-ANONYMOUS, -`NA`)
citing.matrix <- citing.matrix[, !(str_detect(colnames(citing.matrix), "[[:digit:]]"))] %>%
select(-`A CORRECTION`, -`A LUDW U FREIB HA`, -`AA VV`, -`AA XV`)
shorten.name <- function(x){
if(str_detect(x, "^ARISTOT[A-Z]+") & !(str_detect(x, "[[:space:]]"))){
short.name <- "ARISTOTLE"
}else if(str_detect(x, "^HUSSER[A-Z]*[[:space:]]E[A-Z]*")){
short.name <- "HUSSERL E"
}
if(str_detect(x, "^VAN DER|^VAN DEN|^VON DER")){
short.name <- str_extract(x, "^[A-Z]+[[:space:]][A-Z]+[[:space:]][A-Z]+[[:space:]]*[[A-Z]]{1}")
}else if(str_detect(x, "^VAN |^VON ")){
short.name <- str_extract(x, "^[A-Z]+[[:space:]][A-Z]+[[:space:]]*[[A-Z]]{1}")
} else{
short.name <- str_extract(x, "^[A-Z]+[[:space:]]*[[A-Z]]{1}")
}
return(short.name)
}
short.names <- colnames(citing.matrix)[-1] %>%
map_chr(shorten.name)
# to make all data line up, get first authors to SURNAME L form too
short.cited <- map_chr(citing.matrix$first.author, shorten.name)
citing.matrix <- citing.matrix %>%
mutate(first.author = short.cited)
# consolidate
citing.matrix <- citing.matrix %>% group_by(first.author) %>% summarise_all(sum)
new.citing.matrix <- matrix(0, nrow =  nrow(citing.matrix), ncol = length(unique(short.names)),dimnames = list(citing.matrix$first.author, unique(short.names)))
colnames(new.citing.matrix) <- unique(short.names)
#transform df into matrix
old.citing.matrix <- citing.matrix[,-1] %>%
as.matrix()
row.names(old.citing.matrix) <- citing.matrix$first.author
for(name in sort(colnames(citing.matrix)[-1])){
# get short version of name
short.name <- shorten.name(name)
# sum old name in y with short name in new matrix. this ends up summing multiple versions of the same author in the same column on the new matrix (v.gr. "ADORNO", "ADORNO T" "ADORNO TW" "ADORNO T W" etc)
new.vector <- new.citing.matrix[, short.name] + old.citing.matrix[, name]
new.citing.matrix[, short.name] <- new.vector
}
aristotle.columns <- colnames(new.citing.matrix) %>% .[str_detect(., "ARISTOT") & !(str_detect(., " "))]
new.aristotle.column <- apply(X = new.citing.matrix[,aristotle.columns], MARGIN = 1, FUN = sum)
new.citing.matrix <- new.citing.matrix[, !(colnames(new.citing.matrix) %in% aristotle.columns)]
new.citing.matrix <- cbind(new.citing.matrix, new.aristotle.column)
colnames(new.citing.matrix)[ncol(new.citing.matrix)] <- "ARISTOTLE"
husserl.columns <- colnames(new.citing.matrix) %>% .[str_detect(., "HUSSER[A-Z]* E")]
new.husserl.column <- apply(X = new.citing.matrix[,husserl.columns], MARGIN = 1, FUN = sum)
new.citing.matrix <- new.citing.matrix[, !(colnames(new.citing.matrix) %in% husserl.columns)]
new.citing.matrix <- cbind(new.citing.matrix, new.husserl.column)
colnames(new.citing.matrix)[ncol(new.citing.matrix)] <- "HUSSERL E"
small.new.citing.matrix <- new.citing.matrix[, colSums(new.citing.matrix) >= 5]
small.new.citing.matrix <- new.citing.matrix[rowSums(new.citing.matrix) >= 5,]
complete.authors <- rownames(new.citing.matrix)
new.citing.matrix <- new.citing.matrix %>%
as_tibble() %>%
add_column(first.author = complete.authors)
sparse.citing <- new.citing.matrix %>%
select(-first.author) %>%
Matrix::sparseMatrix()
sparse.citing <- new.citing.matrix %>%
select(-first.author) %>%
Matrix::Matrix(sparse = TRUE)
new.citing.matrix
new.citing.matrix %>% select(-first.author) %>% as.matrix
sparse.citing <- new.citing.matrix %>%
select(-first.author) %>%
as.matrix %>%
Matrix::Matrix(sparse = TRUE)
rownames(sparse.citing)
rownames(sparse.citing) <- complete.authors
Matrix::writeMM(sparse.citing, "clean_complete_matrix.txt")
x <- Matrix::readMM("clean_complete.matrix.txt")
x <- Matrix::readMM("clean_complete_matrix.txt")
x
identical(x, sparse.citing)
?writeMM
write(colnames(sparse.citing), "complete_matrix_colnames.txt")
write(row.names(sparse.citing), "complete_matrix_rownames.txt")
Matrix::writeMM(sparse.citing, "clean_complete_matrix.txt")
Matrix::writeMM(sparse.citing, "complete_matrix.txt")
new.citing.matrix <- matrix(0, nrow =  nrow(citing.matrix), ncol = length(unique(short.names)),dimnames = list(citing.matrix$first.author, unique(short.names)))
colnames(new.citing.matrix) <- unique(short.names)
#transform df into matrix
old.citing.matrix <- citing.matrix[,-1] %>%
as.matrix()
row.names(old.citing.matrix) <- citing.matrix$first.author
for(name in sort(colnames(citing.matrix)[-1])){
# get short version of name
short.name <- shorten.name(name)
# sum old name in y with short name in new matrix. this ends up summing multiple versions of the same author in the same column on the new matrix (v.gr. "ADORNO", "ADORNO T" "ADORNO TW" "ADORNO T W" etc)
new.vector <- new.citing.matrix[, short.name] + old.citing.matrix[, name]
new.citing.matrix[, short.name] <- new.vector
}
# manually fix some authors (doing regex makes this extremely slow)
aristotle.columns <- colnames(new.citing.matrix) %>% .[str_detect(., "ARISTOT") & !(str_detect(., " "))]
new.aristotle.column <- apply(X = new.citing.matrix[,aristotle.columns], MARGIN = 1, FUN = sum)
new.citing.matrix <- new.citing.matrix[, !(colnames(new.citing.matrix) %in% aristotle.columns)]
new.citing.matrix <- cbind(new.citing.matrix, new.aristotle.column)
colnames(new.citing.matrix)[ncol(new.citing.matrix)] <- "ARISTOTLE"
husserl.columns <- colnames(new.citing.matrix) %>% .[str_detect(., "HUSSER[A-Z]* E")]
new.husserl.column <- apply(X = new.citing.matrix[,husserl.columns], MARGIN = 1, FUN = sum)
new.citing.matrix <- new.citing.matrix[, !(colnames(new.citing.matrix) %in% husserl.columns)]
new.citing.matrix <- cbind(new.citing.matrix, new.husserl.column)
colnames(new.citing.matrix)[ncol(new.citing.matrix)] <- "HUSSERL E"
# remove authors with less than 5 citations
small.new.citing.matrix <- new.citing.matrix[, colSums(new.citing.matrix) >= 5]
# remove authors who cited only authors with less than 5 citations
small.new.citing.matrix <- new.citing.matrix[rowSums(new.citing.matrix) >= 5,]
# for the normal one, any author with less than 1 citation (that is, only 1 author cited them only 1 time) is probably noise
new.citing.matrix <- new.citing.matrix[, colSums(new.citing.matrix) > 1]
new.citing.matrix[, colSums(new.citing.matrix) >= 5]
colSums(new.citing.matrix) >= 5
(colSums(new.citing.matrix) >= 5) %>% sum
small.new.citing.matrix <- new.citing.matrix[, colSums(new.citing.matrix) >= 5]
small.new.citing.matrix <- new.citing.matrix[rowSums(new.citing.matrix) >= 5,]
new.citing.matrix <- new.citing.matrix[, colSums(new.citing.matrix) > 1]
complete.authors <- rownames(new.citing.matrix)
new.citing.matrix <- new.citing.matrix %>%
as_tibble() %>%
add_column(first.author = complete.authors)
sparse.citing <- new.citing.matrix %>%
select(-first.author) %>%
as.matrix %>%
Matrix::Matrix(sparse = TRUE)
rownames(sparse.citing) <- complete.authors
write(colnames(sparse.citing), "complete_matrix_colnames.txt")
write(row.names(sparse.citing), "complete_matrix_rownames.txt")
Matrix::writeMM(sparse.citing, "complete_matrix.txt")
sparse.small.citing <- small.new.citing.matrix %>%
select(-first.author) %>%
as.matrix %>%
Matrix::Matrix(sparse = TRUE)
small.new.citing.matrix <- small.new.citing.matrix %>%
as_tibble() %>%
add_column(first.author = small.authors)
small.authors <- rownames(small.new.citing.matrix)
small.new.citing.matrix <- small.new.citing.matrix %>%
as_tibble() %>%
add_column(first.author = small.authors)
sparse.small.citing <- small.new.citing.matrix %>%
select(-first.author) %>%
as.matrix %>%
Matrix::Matrix(sparse = TRUE)
rownames(sparse.small.citing) <- small.authors
rownames(sparse.small.citing) <- small.authors
write(colnames(sparse.small.citing), "small_matrix_colnames.txt")
write(row.names(sparse.small.citing), "small_matrix_rownames.txt")
Matrix::writeMM(sparse.small.citing, "complete_matrix.txt")
new.citing.matrix <- matrix(0, nrow =  nrow(citing.matrix), ncol = length(unique(short.names)),dimnames = list(citing.matrix$first.author, unique(short.names)))
colnames(new.citing.matrix) <- unique(short.names)
#transform df into matrix
old.citing.matrix <- citing.matrix[,-1] %>%
as.matrix()
row.names(old.citing.matrix) <- citing.matrix$first.author
for(name in sort(colnames(citing.matrix)[-1])){
# get short version of name
short.name <- shorten.name(name)
# sum old name in y with short name in new matrix. this ends up summing multiple versions of the same author in the same column on the new matrix (v.gr. "ADORNO", "ADORNO T" "ADORNO TW" "ADORNO T W" etc)
new.vector <- new.citing.matrix[, short.name] + old.citing.matrix[, name]
new.citing.matrix[, short.name] <- new.vector
}
# manually fix some authors (doing regex makes this extremely slow)
aristotle.columns <- colnames(new.citing.matrix) %>% .[str_detect(., "ARISTOT") & !(str_detect(., " "))]
new.aristotle.column <- apply(X = new.citing.matrix[,aristotle.columns], MARGIN = 1, FUN = sum)
new.citing.matrix <- new.citing.matrix[, !(colnames(new.citing.matrix) %in% aristotle.columns)]
new.citing.matrix <- cbind(new.citing.matrix, new.aristotle.column)
colnames(new.citing.matrix)[ncol(new.citing.matrix)] <- "ARISTOTLE"
husserl.columns <- colnames(new.citing.matrix) %>% .[str_detect(., "HUSSER[A-Z]* E")]
new.husserl.column <- apply(X = new.citing.matrix[,husserl.columns], MARGIN = 1, FUN = sum)
new.citing.matrix <- new.citing.matrix[, !(colnames(new.citing.matrix) %in% husserl.columns)]
new.citing.matrix <- cbind(new.citing.matrix, new.husserl.column)
colnames(new.citing.matrix)[ncol(new.citing.matrix)] <- "HUSSERL E"
# remove authors with less than 5 citations
small.new.citing.matrix <- new.citing.matrix[, colSums(new.citing.matrix) >= 5]
# remove authors who cited only authors with less than 5 citations
small.new.citing.matrix <- new.citing.matrix[rowSums(new.citing.matrix) >= 5,]
# for the normal one, any author with less than 1 citation (that is, only 1 author cited them only 1 time) is probably noise
new.citing.matrix <- new.citing.matrix[, colSums(new.citing.matrix) > 1]
small.new.citing.matrix <- new.citing.matrix[, colSums(new.citing.matrix) >= 5]
small.new.citing.matrix <- new.citing.matrix[rowSums(new.citing.matrix) >= 5,]
new.citing.matrix
row.names(new.citing.matrix)
new.citing.matrix %>% Matrix::Matrix(sparse = TRUE)
new.citing.matrix <- new.citing.matrix %>%
Matrix::Matrix(sparse = TRUE)
write(colnames(sparse.citing), "complete_matrix_colnames.txt")
write(row.names(sparse.citing), "complete_matrix_rownames.txt")
Matrix::writeMM(sparse.citing, "complete_matrix.txt")
small.citing.matrix <- small.citing.matrix %>%
Matrix::Matrix(sparse = TRUE)
small.citing.matrix <- new.citing.matrix[, colSums(new.citing.matrix) >= 5]
small.citing.matrix <- new.citing.matrix[rowSums(new.citing.matrix) >= 5,]
new.citing.matrix <- matrix(0, nrow =  nrow(citing.matrix), ncol = length(unique(short.names)),dimnames = list(citing.matrix$first.author, unique(short.names)))
colnames(new.citing.matrix) <- unique(short.names)
#transform df into matrix
old.citing.matrix <- citing.matrix[,-1] %>%
as.matrix()
row.names(old.citing.matrix) <- citing.matrix$first.author
for(name in sort(colnames(citing.matrix)[-1])){
# get short version of name
short.name <- shorten.name(name)
# sum old name in y with short name in new matrix. this ends up summing multiple versions of the same author in the same column on the new matrix (v.gr. "ADORNO", "ADORNO T" "ADORNO TW" "ADORNO T W" etc)
new.vector <- new.citing.matrix[, short.name] + old.citing.matrix[, name]
new.citing.matrix[, short.name] <- new.vector
}
# manually fix some authors (doing regex makes this extremely slow)
aristotle.columns <- colnames(new.citing.matrix) %>% .[str_detect(., "ARISTOT") & !(str_detect(., " "))]
new.aristotle.column <- apply(X = new.citing.matrix[,aristotle.columns], MARGIN = 1, FUN = sum)
new.citing.matrix <- new.citing.matrix[, !(colnames(new.citing.matrix) %in% aristotle.columns)]
new.citing.matrix <- cbind(new.citing.matrix, new.aristotle.column)
colnames(new.citing.matrix)[ncol(new.citing.matrix)] <- "ARISTOTLE"
husserl.columns <- colnames(new.citing.matrix) %>% .[str_detect(., "HUSSER[A-Z]* E")]
new.husserl.column <- apply(X = new.citing.matrix[,husserl.columns], MARGIN = 1, FUN = sum)
new.citing.matrix <- new.citing.matrix[, !(colnames(new.citing.matrix) %in% husserl.columns)]
new.citing.matrix <- cbind(new.citing.matrix, new.husserl.column)
colnames(new.citing.matrix)[ncol(new.citing.matrix)] <- "HUSSERL E"
# for the normal one, any author with less than 1 citation (that is, only 1 author cited them only 1 time) is probably noise
new.citing.matrix <- new.citing.matrix[, colSums(new.citing.matrix) > 1]
# remove authors with less than 5 citations
small.citing.matrix <- new.citing.matrix[, colSums(new.citing.matrix) >= 5]
# remove authors who cited only authors with less than 5 citations
small.citing.matrix <- new.citing.matrix[rowSums(new.citing.matrix) >= 5,]
small.citing.matrix <- new.citing.matrix[, colSums(new.citing.matrix) >= 5]
small.citing.matrix <- new.citing.matrix[rowSums(new.citing.matrix) >= 5,]
small.citing.matrix <- new.citing.matrix[, colSums(new.citing.matrix) >= 5]
small.citing.matrix <- new.citing.matrix[rowSums(new.citing.matrix) >= 5,]
small.citing.matrix <- new.citing.matrix[, colSums(new.citing.matrix) >= 5]
small.citing.matrix <- new.citing.matrix[rowSums(new.citing.matrix) >= 5,]
small.citing.matrix <- new.citing.matrix[, colSums(new.citing.matrix) >= 5]
small.citing.matrix <- new.citing.matrix[rowSums(new.citing.matrix) >= 5,]
small.citing.matrix <- new.citing.matrix[, colSums(new.citing.matrix) >= 5]
small.citing.matrix <- small.citing.matrix[rowSums(small.citing.matrix) >= 5,]
new.citing.matrix <- new.citing.matrix %>%
Matrix::Matrix(sparse = TRUE)
write(colnames(sparse.citing), "complete_matrix_colnames.txt")
write(row.names(sparse.citing), "complete_matrix_rownames.txt")
Matrix::writeMM(sparse.citing, "complete_matrix.txt")
small.citing.matrix <- small.citing.matrix %>%
Matrix::Matrix(sparse = TRUE)
write(colnames(new.citing.matrix), "complete_matrix_colnames.txt")
write(row.names(new.citing.matrix), "complete_matrix_rownames.txt")
Matrix::writeMM(new.citing.matrix, "complete_matrix.txt")
write(colnames(small.citing.matrix), "small_matrix_colnames.txt")
write(row.names(small.citing.matrix), "small_matrix_rownames.txt")
Matrix::writeMM(small.citing.matrix, "small_matrix.txt")
new.citing.matrix %>%
as_tibble()
new.citing.matrix %>%
as.matrix %>%
as_tibble()
new.citing.matrix <- new.citing.matrix %>%
as.matrix %>%
as_tibble()
complete.citing.authors <- read("small_matrix_rownames")
complete.citing.authors <- file("small_matrix_rownames")
complete.citing.authors
read.delim("small_matrix_rownames.txt")
x <- read.delim("small_matrix_rownames.txt")
x
x <- read.delim("small_matrix_rownames.txt", col.names = F)
complete.citing.authors <- read.delim("small_matrix_rownames", col.names = "Author")
complete.citing.authors <- read.delim("small_matrix_rownames.txt", col.names = "Author")
complete.citing.authors
complete.citing.authors$Author
new.citing.matrix <- new.citing.matrix %>%
as.matrix %>%
as_tibble() %>%
mutate(first.author = complete.citing.authors$Author)
complete.citing.authors <- read.delim("complete_matrix_rownames.txt", col.names = "Author")
new.citing.matrix <- new.citing.matrix %>%
as.matrix %>%
as_tibble() %>%
mutate(first.author = complete.citing.authors$Author)
x <- new.citing.matrix %>%
as.matrix %>%
as_tibble()
x
read.delim("complete_matrix_rownames.txt", col.names = "Author")
read.delim("complete_matrix_rownames.txt", col.names = "Author")[1:10,]
complete.citing.authors <- read.delim("complete_matrix_rownames.txt")
read.delim("complete_matrix_rownames.txt")[1:10,]
?read.delim
read.delim("complete_matrix_rownames.txt", header = FALSE)[1:10,]
complete.citing.authors <- read.delim("complete_matrix_rownames.txt", header = FALSE)
new.citing.matrix <- new.citing.matrix %>%
as.matrix %>%
as_tibble() %>%
mutate(first.author = complete.citing.authors$Author)
small.citing.authors <- read.delim("small_matrix_rownames.txt", header = FALSE)
small.citing.matrix <- small.citing.matrix %>%
as.matrix %>%
as_tibble() %>%
mutate(first.author = small.citing.authors$Author)
complete.edge.list <- gather(new.citing.matrix, "Target", "Weight", -first.author) %>%
rename(Source = first.author) %>%
filter(Weight > 0)
new.citing.matrix <- new.citing.matrix %>%
as.matrix %>%
as_tibble() %>%
mutate(first.author = complete.citing.authors$Author)
new.citing.matrix <- new.citing.matrix %>%
as.matrix %>%
as_tibble() %>%
add_column(first.author = complete.citing.authors$Author)
complete.citing.authors
complete.citing.authors
complete.citing.authors$V1
new.citing.matrix <- new.citing.matrix %>%
as.matrix %>%
as_tibble() %>%
add_column(first.author = complete.citing.authors$V1)
new.citing.matrix$first.author
small.citing.authors <- read.delim("small_matrix_rownames.txt", header = FALSE)
small.citing.matrix <- small.citing.matrix %>%
as.matrix %>%
as_tibble() %>%
mutate(first.author = small.citing.authors$V1)
complete.edge.list <- gather(new.citing.matrix, "Target", "Weight", -first.author) %>%
rename(Source = first.author) %>%
filter(Weight > 0)
write_csv(complete.edge.list, "complete_edge_list.csv")
small.edge.list <- gather(small.citing.matrix, "Target", "Weight", -first.author) %>%
rename(Source = first.author) %>%
filter(Weight > 0)
write_csv(small.edge.list, "small_edge_list.csv")
library(tidyverse)
library(igraph)
library(tidygraph)
library(ggraph)
# Change this to where the files are stored. Small_edge_list.csv has the limited network (in-degree and out-degree filtering)
db <- read_csv('small_edge_list.csv') %>%
rename(weight = Weight)
head(db)
# Make an undirected graph first and simplify it to remove redundant links
net <- igraph::graph_from_data_frame(db, directed = FALSE) %>%
simplify()
head(net)
# Get eigenvector centrality
eigenvectors <- igraph::eigen_centrality(net) %>% .$vector
eigenvectors
str(eigenvectors)
# Try both louvain and F&G Clustering
lv.cluster <- igraph::cluster_louvain(net)
fg.cluster <- igraph::cluster_fast_greedy(net)
# Build an igraph
net <- igraph::graph_from_data_frame(db, directed = TRUE)
# Add eigenvector centrality, indegree and community to the graph for plotting.
net <- igraph::set.vertex.attribute(graph = net, name = "eigen", value =  eigenvectors)
net <- igraph::set.vertex.attribute(graph = net, name = "degree", value = degree(net, mode = "in"))
# Change this line to use either fg.cluster or lv.cluster
net <- igraph::set.vertex.attribute(graph = net, name = "community",
value = igraph::membership(lv.cluster))
# Import as tidynet, which represents graph as a dataframe and it's simpler to visualize it
tidynet <- tidygraph::as_tbl_graph(net)
# Get nodes as a dataframe
nodes <- tidynet %>%
tidygraph::activate(nodes) %>%
as_tibble()
View(nodes)
?activate
?desc
# Get the tidynet with added clustering
# Set a "display.name" so we can show only the authors with an indegree > 50 (arbitrary).
# The > 50 cutoff seems to be a little too low for the big network.
tidynet <- tidynet %>%
tidygraph::activate(nodes) %>%
mutate(community = factor(community),
display.name = ifelse(degree > 50, name, NA))
View(nodes)
View(tidnet)
View(tidynet)
# Get the tidynet with added clustering
# Set a "display.name" so we can show only the authors with an indegree > 50 (arbitrary).
# The > 50 cutoff seems to be a little too low for the big network.
tidynet <- tidynet %>%
tidygraph::activate(nodes) %>%
mutate(community = factor(community),
display.name = ifelse(degree > 50, name, NA))
View(tidynet)
# This determines which layout the network will have when plotted. It's saved as a dataframe of x and y locations for each node. This is faster than doing it at the moment of plotting.
# layout.drl is the algorithm in which OpenOrd was based.
# dlr_defaults$default loads the default configuration for the dlr algorithm. Other options change the look drastically!
net.layout <- igraph::layout.drl(net, options = drl_defaults$coarsen)
